
(*Scheme for t=3/s=4, old version*)

proc iet_and_3_old:

	inputs: a[0:3], b[0:3]
	outputs: c[0:3]
	randoms: r[0:31];

	(*randoms*)
	
	r_00 := r[0] + r[1]; 
	reg_0 := r[1] + r[2];
	r_01 := reg_0 + r[16];
	reg_1 := r[2] + r[3];	
	r_02 := reg_1 + r[17];
	r_03 := r[3] + r[4];
	
	r_10 := r[4] + r[5]; 
	reg_2 := r[5] + r[6];
	r_11 := reg_2 + r[17];
	reg_3 := r[6] + r[7];
	r_12 := reg_3 + r[18];
	r_13 := r[7] + r[8];
	
	r_20 := r[8] + r[9];
	reg_4 := r[9] + r[10];
	r_21 := reg_4 + r[18];
	reg_5 := r[10] + r[11];
	r_22 := reg_5 + r[19];
	r_23 := r[11] + r[12];
	
	r_30 := r[12] + r[13]; 
	reg_6 := r[13] + r[14];
	r_31 := reg_6 + r[19];
	reg_7 := r[14] + r[15];
	r_32 := reg_7 + r[16];
	r_33 := r[15] + r[0];
	
	(*first cone, no-linear layer*)
	a0b0 := a[0] * b[0];
	a0b0 = ![a0b0 + r_00];
	a0b1 := a[0] * b[1];
	a0b1 = ![a0b1 + r_01];
	a0b2 := a[0] * b[2];
	a0b2 = ![a0b2 + r_02];
	a0b3 := a[0] * b[3];
	a0b3 = ![a0b3 + r_03];

	(*second cone, no-linear layer*)
	a1b0 := a[1] * b[0];
	a1b0 = ![a1b0 + r_10];
	a1b1 := a[1] * b[1];
	a1b1 = ![a1b1 + r_11];
	a1b2 := a[1] * b[2];
	a1b2 = ![a1b2 + r_12];
	a1b3 := a[1] * b[3];
	a1b3 = ![a1b3 + r_13];

	(*third cone, no-linear layer*)
	a2b0 := a[2] * b[0];
	a2b0 = ![a2b0 + r_20];
	a2b1 := a[2] * b[1];
	a2b1 = ![a2b1 + r_21];
	a2b2 := a[2] * b[2];
	a2b2 = ![a2b2 + r_22];
	a2b3 := a[2] * b[3];
	a2b3 = ![a2b3 + r_23];

	(*fourth cone, no-linear layer*)
	a3b0 := a[3] * b[0];
	a3b0 = ![a3b0 + r_30];
	a3b1 := a[3] * b[1];
	a3b1 = ![a3b1 + r_31];
	a3b2 := a[3] * b[2];
	a3b2 = ![a3b2 + r_32];
	a3b3 := a[3] * b[3];
	a3b3 = ![a3b3 + r_33];

	(*first cone, compression*)
	c[0] := a0b0 + a0b1;
	c[0] := c[0] + a0b2;
	c[0] := c[0] + a0b3;

	(*second cone, compression*)
	c[1] := a1b0 + a1b1;
	c[1] := c[1] + a1b2;
	c[1] := c[1] + a1b3;

	(*third cone, compression*)
	c[2] := a2b0 + a2b1;
	c[2] := c[2] + a2b2;
	c[2] := c[2] + a2b3;

	(*fourth cone, compression*)
	c[3] := a3b0 + a3b1;
	c[3] := c[3] + a3b2;
	c[3] := c[3] + a3b3;

end

verbose 1
SNI iet_and_3_old
