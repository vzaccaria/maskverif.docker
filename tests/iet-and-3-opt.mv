
(*CMS scheme for t=3/s=4, with 16 randoms*)

proc iet_and_3_opt:

	inputs: a[0:3], b[0:3]
	outputs: c[0:3]
	randoms: r[0:15];

	(*randoms*)
	reg_r0 = ![r[0] + r[4]];
	reg_r1 = ![r[1] + r[5]];
	reg_r2 = ![r[2] + r[6]];
	reg_r3 = ![r[3] + r[7]];

	reg_r4 = ![r[4] + r[8]];
	reg_r5 = ![r[5] + r[9]];
	reg_r6 = ![r[6] + r[10]];
	reg_r7 = ![r[7] + r[11]];

	reg_r8 = ![r[8] + r[12]];
	reg_r9 = ![r[9] + r[13]];
	reg_r10 = ![r[10] + r[14]];
	reg_r11 = ![r[11] + r[15]];

	reg_r12 = ![r[12] + r[0]];
	reg_r13 = ![r[13] + r[1]];
	reg_r14 = ![r[14] + r[2]];
	reg_r15 = ![r[15] + r[3]];


	(*first cone, no-linear layer*)
	a0b0 := a[0] * b[0];
	a0b0 = ![a0b0 + reg_r0];
	a0b1 := a[0] * b[1];
	a0b1 = ![a0b1 + reg_r1];
	a0b2 := a[0] * b[2];
	a0b2 = ![a0b2 + reg_r2];
	a0b3 := a[0] * b[3];
	a0b3 = ![a0b3 + reg_r3];

	(*second cone, no-linear layer*)
	a1b0 := a[1] * b[0];
	a1b0 = ![a1b0 + reg_r4];
	a1b1 := a[1] * b[1];
	a1b1 = ![a1b1 + reg_r5];
	a1b2 := a[1] * b[2];
	a1b2 = ![a1b2 + reg_r6];
	a1b3 := a[1] * b[3];
	a1b3 = ![a1b3 + reg_r7];

	(*third cone, no-linear layer*)
	a2b0 := a[2] * b[0];
	a2b0 = ![a2b0 + reg_r8];
	a2b1 := a[2] * b[1];
	a2b1 = ![a2b1 + reg_r9];
	a2b2 := a[2] * b[2];
	a2b2 = ![a2b2 + reg_r10];
	a2b3 := a[2] * b[3];
	a2b3 = ![a2b3 + reg_r11];

	(*fourth cone, no-linear layer*)
	a3b0 := a[3] * b[0];
	a3b0 = ![a3b0 + reg_r12];
	a3b1 := a[3] * b[1];
	a3b1 = ![a3b1 + reg_r13];
	a3b2 := a[3] * b[2];
	a3b2 = ![a3b2 + reg_r14];
	a3b3 := a[3] * b[3];
	a3b3 = ![a3b3 + reg_r15];

	(*first cone, compression*)
	c[0] := a0b0 + a0b1;
	c[0] := c[0] + a0b2;
	c[0] := c[0] + a0b3;

	(*second cone, compression*)
	c[1] := a1b0 + a1b1;
	c[1] := c[1] + a1b2;
	c[1] := c[1] + a1b3;

	(*third cone, compression*)
	c[2] := a2b0 + a2b1;
	c[2] := c[2] + a2b2;
	c[2] := c[2] + a2b3;

	(*fourth cone, compression*)
	c[3] := a3b0 + a3b1;
	c[3] := c[3] + a3b2;
	c[3] := c[3] + a3b3;

end

verbose 1
SNI iet_and_3_opt
