
(*Scheme for t=4/s=5, with 2*2^s*)

proc iet_and_4:

	inputs: a[0:4], b[0:4]
	outputs: c[0:4]
	randoms: r[0:49];

	(*randoms*)
	
	r_00_01 := r[0] + r[1]; 
	r_01_02 := r[1] + r[2];
	r_02_03 := r[2] + r[3];
	r_03_04 := r[3] + r[4];
	r_04_00 := r[4] + r[0];
	
	r_10_11 := r[5] + r[6]; 
	r_11_12 := r[6] + r[7];
	r_12_13 := r[7] + r[8];
	r_13_14 := r[8] + r[9];
	r_14_10 := r[9] + r[5];
	
	r_20_21 := r[10] + r[11]; 
	r_21_22 := r[11] + r[12];
	r_22_23 := r[12] + r[13];
	r_23_24 := r[13] + r[14];
	r_24_20 := r[14] + r[10];
	
	r_30_31 := r[15] + r[16]; 
	r_31_32 := r[16] + r[17];
	r_32_33 := r[17] + r[18];
	r_33_34 := r[18] + r[19];
	r_34_30 := r[19] + r[15];
	
	r_40_41 := r[20] + r[21]; 
	r_41_42 := r[21] + r[22];
	r_42_43 := r[22] + r[23];
	r_43_44 := r[23] + r[24];
	r_44_40 := r[24] + r[20];

	q_00_10 := r[25] + r[30];
	q_01_11 := r[26] + r[31];
	q_02_12 := r[27] + r[32];
	q_03_13 := r[28] + r[33];
	q_04_14 := r[29] + r[34];
	
	q_10_20 := r[30] + r[35];
	q_11_21 := r[31] + r[36];
	q_12_22 := r[32] + r[37];
	q_13_23 := r[33] + r[38];
	q_14_24 := r[34] + r[39];
	
	q_20_30 := r[35] + r[40];
	q_21_31 := r[36] + r[41];
	q_22_32 := r[37] + r[42];
	q_23_33 := r[38] + r[43];
	q_24_34 := r[39] + r[44];
	
	q_30_40 := r[40] + r[45];
	q_31_41 := r[41] + r[46];
	q_32_42 := r[42] + r[47];
	q_33_43 := r[43] + r[48];
	q_34_44 := r[44] + r[49];
	
	q_40_00 := r[45] + r[25];
	q_41_01 := r[46] + r[26];
	q_42_02 := r[47] + r[27];
	q_43_03 := r[48] + r[28];
	q_44_04 := r[49] + r[29];

	reg_r0 = ![r_00_01 + q_00_10];
	reg_r1 = ![r_01_02 + q_01_11];
	reg_r2 = ![r_02_03 + q_02_12];
	reg_r3 = ![r_03_04 + q_03_13];
	reg_r4 = ![r_04_00 + q_04_14];
	
	reg_r5 = ![r_10_11 + q_10_20];
	reg_r6 = ![r_11_12 + q_11_21];
	reg_r7 = ![r_12_13 + q_12_22];
	reg_r8 = ![r_13_14 + q_13_23];
	reg_r9 = ![r_14_10 + q_14_24];
	
	reg_r10 = ![r_20_21 + q_20_30];
	reg_r11 = ![r_21_22 + q_21_31];
	reg_r12 = ![r_22_23 + q_22_32];
	reg_r13 = ![r_23_24 + q_23_33];
	reg_r14 = ![r_24_20 + q_24_34];
	
	reg_r15 = ![r_30_31 + q_30_40];
	reg_r16 = ![r_31_32 + q_31_41];
	reg_r17 = ![r_32_33 + q_32_42];
	reg_r18 = ![r_33_34 + q_33_43];
	reg_r19 = ![r_34_30 + q_34_44];
	
	reg_r20 = ![r_40_41 + q_40_00];
	reg_r21 = ![r_41_42 + q_41_01];
	reg_r22 = ![r_42_43 + q_42_02];
	reg_r23 = ![r_43_44 + q_43_03];
	reg_r24 = ![r_44_40 + q_44_04];
	
	(*first cone, no-linear layer*)
	a0b0 := a[0] * b[0];
	a0b0 = ![a0b0 + reg_r0];
	a0b1 := a[0] * b[1];
	a0b1 = ![a0b1 + reg_r1];
	a0b2 := a[0] * b[2];
	a0b2 = ![a0b2 + reg_r2];
	a0b3 := a[0] * b[3];
	a0b3 = ![a0b3 + reg_r3];
	a0b4 := a[0] * b[4];
	a0b4 = ![a0b4 + reg_r4];

	(*second cone, no-linear layer*)
	a1b0 := a[1] * b[0];
	a1b0 = ![a1b0 + reg_r5];
	a1b1 := a[1] * b[1];
	a1b1 = ![a1b1 + reg_r6];
	a1b2 := a[1] * b[2];
	a1b2 = ![a1b2 + reg_r7];
	a1b3 := a[1] * b[3];
	a1b3 = ![a1b3 + reg_r8];
	a1b4 := a[1] * b[4];
	a1b4 = ![a1b4 + reg_r9];

	(*third cone, no-linear layer*)
	a2b0 := a[2] * b[0];
	a2b0 = ![a2b0 + reg_r10];
	a2b1 := a[2] * b[1];
	a2b1 = ![a2b1 + reg_r11];
	a2b2 := a[2] * b[2];
	a2b2 = ![a2b2 + reg_r12];
	a2b3 := a[2] * b[3];
	a2b3 = ![a2b3 + reg_r13];
	a2b4 := a[2] * b[4];
	a2b4 = ![a2b4 + reg_r14];

	(*fourth cone, no-linear layer*)
	a3b0 := a[3] * b[0];
	a3b0 = ![a3b0 + reg_r15];
	a3b1 := a[3] * b[1];
	a3b1 = ![a3b1 + reg_r16];
	a3b2 := a[3] * b[2];
	a3b2 = ![a3b2 + reg_r17];
	a3b3 := a[3] * b[3];
	a3b3 = ![a3b3 + reg_r18];
	a3b4 := a[3] * b[4];
	a3b4 = ![a3b4 + reg_r19];

	(*fifth cone, no-linear layer*)
	a4b0 := a[4] * b[0];
	a4b0 = ![a4b0 + reg_r20];
	a4b1 := a[4] * b[1];
	a4b1 = ![a4b1 + reg_r21];
	a4b2 := a[4] * b[2];
	a4b2 = ![a4b2 + reg_r22];
	a4b3 := a[4] * b[3];
	a4b3 = ![a4b3 + reg_r23];
	a4b4 := a[4] * b[4];
	a4b4 = ![a4b4 + reg_r24];

	(*first cone, compression*)
	c[0] := a0b0 + a0b1;
	c[0] := c[0] + a0b2;
	c[0] := c[0] + a0b3;
	c[0] := c[0] + a0b4;

	(*second cone, compression*)
	c[1] := a1b0 + a1b1;
	c[1] := c[1] + a1b2;
	c[1] := c[1] + a1b3;
	c[1] := c[1] + a1b4;

	(*third cone, compression*)
	c[2] := a2b0 + a2b1;
	c[2] := c[2] + a2b2;
	c[2] := c[2] + a2b3;
	c[2] := c[2] + a2b4;

	(*fourth cone, compression*)
	c[3] := a3b0 + a3b1;
	c[3] := c[3] + a3b2;
	c[3] := c[3] + a3b3;
	c[3] := c[3] + a3b4;

	(*fifth cone, compression*)
	c[4] := a4b0 + a4b1;
	c[4] := c[4] + a4b2;
	c[4] := c[4] + a4b3;
	c[4] := c[4] + a4b4;

end

verbose 1
SNI iet_and_4
